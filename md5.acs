// ACS implementation of the MD5 hashing function.

#define BYTE_SIZE 8
#define INT_SIZE 4

// Left shift amount.
int md5_s[ 64 ] = {
   // Round #1
   7, 12, 17, 22, 
   7, 12, 17, 22,
   7, 12, 17, 22,
   7, 12, 17, 22,
   // Round #2
   5, 9, 14, 20, 
   5, 9, 14, 20,
   5, 9, 14, 20,
   5, 9, 14, 20,
   // Round #3
   4, 11, 16, 23,
   4, 11, 16, 23,
   4, 11, 16, 23,
   4, 11, 16, 23,
   // Round #4
   6, 10, 15, 21,
   6, 10, 15, 21,
   6, 10, 15, 21,
   6, 10, 15, 21,
};

int md5_t[ 64 ] = {
   0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee,
   0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501,
   0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be,
   0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821,
   0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa,
   0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,
   0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed,
   0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,
   0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c,
   0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70,
   0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05,
   0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665,
   0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039,
   0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1,
   0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1,
   0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391,
};

int md5_p[ 64 ] = {
   // Round #1
   0, 1, 2, 3,
   4, 5, 6, 7,
   8, 9, 10, 11,
   12, 13, 14, 15,
   // Round #2
   1, 6, 11, 0,
   5, 10, 15, 4,
   9, 14, 3, 8,
   13, 2, 7, 12,
   // Round #3
   5, 8, 11, 14,
   1, 4, 7, 10,
   13, 0, 3, 6,
   9, 12, 15, 2,
   // Round #4
   0, 7, 14, 5,
   12, 3, 10, 1,
   8, 15, 6, 13,
   4, 11, 2, 9
};

// Size of a message block in bytes.
#define MD5_BLOCK_SIZE 64
#define MD5_BLOCK_SIZE_BITS MD5_BLOCK_SIZE * BYTE_SIZE
#define MD5_MAX_INPUT_SIZE MD5_BLOCK_SIZE

// Contains the message data that will be used to produce the digest.
// An extra block is added for the padding.
int md5_input[ MD5_MAX_INPUT_SIZE + MD5_BLOCK_SIZE ];
int md5_input_size = 0;
int md5_input_pos = 0;
// Contains the final result.
int md5_abcd[ 4 ];
int md5_digest[ 16 + 1 ];

function void Md5AddByte( int byte ) {
   // Pack four individual bytes into a four-byte integer.
   md5_input[ md5_input_pos ] |= byte << ( md5_input_size % 4 * BYTE_SIZE );
   // Move on to the next integer if current integer is full.
   if ( ++md5_input_size % 4 == 0 ) {
      md5_input[ ++md5_input_pos ] = 0;
   }
}

function void Md5AddWord( int word ) {
   while ( word ) {
      Md5AddByte( word & 0xFF );
      word >>= BYTE_SIZE;
   }
}

function void Md5PrepareInput( str msg ) {
   md5_input[ 0 ] = 0;
   md5_input_size = 0;
   md5_input_pos = 0;

   // TODO: Make sure message isn't longer than we can handle.
   int msg_length = strlen( msg );

   // Copy message into a work buffer.
   for ( int msg_pos = 0; msg_pos < msg_length; ++msg_pos ) {
      Md5AddByte( getChar( msg, msg_pos ) );
   }

   // Add padding.
   Md5AddByte( 0x80 );

   int num_null_bytes = 56 - md5_input_size;
   while ( num_null_bytes > 0 ) {
      Md5AddByte( 0x00 );
      --num_null_bytes;
   }

   // Add message length.
   Md5AddWord( msg_length * BYTE_SIZE );
   Md5AddWord( 0x00 );

   /*
   print( x : md5_input[ 0 ] );
   print( x : md5_input[ 1 ] );
   print( x : md5_input[ 2 ] );
   print( x : md5_input[ 3 ] );
   print( x : md5_input[ 4 ] );
   print( x : md5_input[ 5 ] );
   print( x : md5_input[ 6 ] );
   print( x : md5_input[ 7 ] );
   print( x : md5_input[ 8 ] );
   print( x : md5_input[ 9 ] );
   print( x : md5_input[ 10 ] );
   print( x : md5_input[ 11 ] );
   print( x : md5_input[ 12 ] );
   print( x : md5_input[ 13 ] );
   print( x : md5_input[ 14 ] );
   print( x : md5_input[ 15 ] );
   */
}

function void Md5Make( str msg ) {
   Md5PrepareInput( msg );

   // State words.
   md5_abcd[ 0 ] = 0x67452301;
   md5_abcd[ 1 ] = 0xefcdab89;
   md5_abcd[ 2 ] = 0x98badcfe;
   md5_abcd[ 3 ] = 0x10325476;

   int input_block = 0;
   
   for ( int block = 0; block < 1; ++block ) {
      int a = md5_abcd[ 0 ];
      int b = md5_abcd[ 1 ];
      int c = md5_abcd[ 2 ];
      int d = md5_abcd[ 3 ];

      // Perform operations.
      for ( int i = 0; i < 64; ++i ) {
         int func_result = 0;

         // Execute F().
         if ( i >= 0 && i <= 15 ) {
            func_result = ( b & c ) | ( ~b & d );
         }
         // Execute G().
         else if ( i >= 16 && i <= 31 ) {
            func_result = ( b & d ) | ( c & ~d );
         }
         // Execute H().
         else if ( i >= 32 && i <= 47 ) {
            func_result = ( b ^ c ^ d );
         }
         // Execute I().
         else {
            func_result = c ^ ( b | ~d );
         }

         int block_pos = md5_p[ i ];
         int value = md5_input[ input_block + block_pos ];

         int new_b = a + func_result + value + md5_t[ i ];
         new_b = b + Md5LeftRotate( new_b, md5_s[ i ] );

         // Next arguments.
         int old_d = d;

         d = c;
         c = b;
         b = new_b;
         a = old_d;
      }

      // Perform final additions.
      md5_abcd[ 0 ] += a;
      md5_abcd[ 1 ] += b;
      md5_abcd[ 2 ] += c;
      md5_abcd[ 3 ] += d;

      input_block += MD5_BLOCK_SIZE;
   }

   // Reorder state words.
   for ( int word = 0; word < 4; ++word ) {
      md5_abcd[ word ] = 
         Md5LeftRotate( md5_abcd[ word ] & 0xFF, 24 ) |
         Md5LeftRotate( md5_abcd[ word ] & 0xFF00, 8 ) |
         Md5LeftRotate( md5_abcd[ word ] & 0xFF0000, 24 ) |
         Md5LeftRotate( md5_abcd[ word ] & 0xFF000000, 8 );
   }
}

function int Md5LeftRotate( int value, int amount ) {
   int right_shift = value;

   if ( right_shift & 0x80000000 ) {
      right_shift ^= 0x80000000;
      right_shift >>= 32 - amount;
      right_shift |= 0x1 << ( amount - 1 );
   }
   else {
      right_shift >>= 32 - amount;
   }

   return ( ( value << amount ) | right_shift );
}

function void Md5Show( str msg ) {
   Md5Make( msg );
   print( 
      s : "MD5(\"", s : msg, s : "\")\n",
      s : "= ",
      x : md5_abcd[ 0 ], s : " ", 
      x : md5_abcd[ 1 ], s : " ",
      x : md5_abcd[ 2 ], s : " ",
      x : md5_abcd[ 3 ] 
   );
}